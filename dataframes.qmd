

## Chapter 2: Understanding Data Frames in R

Data frames are perhaps one of the most important and widely used data structures in R. If you're familiar with spreadsheets from software like Excel, then you can think of a data frame like a spreadsheet in R. It is a two-dimensional table where each column contains values of one variable, and each row contains one set of values from each column.

A key thing to note about data frames is that different columns can contain different types of data (numeric, character, etc.) but each column must contain the same number of data items (rows).

For instance, let's consider a simple medical example:

```r
patient_data <- data.frame(
  name = c("John Doe", "Jane Doe", "Mary Johnson", "James Smith"),
  age = c(25, 30, 35, 40),
  disease = c("Hypertension", "Diabetes", "Asthma", "None"),
  checkup_date = as.Date(c("2023-01-01", "2023-01-15", "2023-02-01", "2023-02-15"))
)
```

Here, `patient_data` is a data frame that contains four columns: `name`, `age`, `disease`, and `checkup_date`. Each column is a different type of data: character, numeric, character, and date, respectively. 

You can access the individual columns of a data frame in the following way:

```r
patient_data$name
```

This will return the `name` column of the `patient_data` data frame.

The ability to contain different types of data in each column makes data frames particularly suitable for managing and analyzing real-world data. The majority of the data you'll likely be working with in R will be in the form of data frames.

In the following chapters, we will explore various operations we can perform on data frames such as filtering rows, selecting columns, arranging (or sorting) the data, and summarizing it. 

For now, try to create a data frame of your own using the `data.frame()` function. Perhaps you could create a data frame for lab test results, where each row is a patient's lab test and the columns contain details about the test, such as patient's name, test name, test result, and the date of the test.

Let's talk about the three major ecosystems for data manipulation in R: **base R**, **tidyverse**, and **data.table**. These three ecosystems each have different ways of creating and interacting with data frames, and it's important to be aware of these differences.

1. **Base R**: In base R, we use the `data.frame()` function to create data frames. The operations in base R are straightforward but can sometimes become complex for intricate data manipulation tasks.

2. **Tidyverse**: This is a collection of R packages that share an underlying philosophy and common APIs. `tibble`, part of the tidyverse, is an enhanced version of data frames which are easier to work with. Tidyverse functions are highly readable and are often favored for data manipulation and exploration.

3. **Data.table**: This package offers data frames that are faster and more memory-efficient, along with syntax that is more concise. However, it may have a steeper learning curve.

**Exercise**

Let's create a data frame in each ecosystem using patient information.

1. Base R:
```r
patient_data_base <- data.frame(
  name = c("John Doe", "Jane Doe", "Mary Johnson", "James Smith"),
  age = c(25, 30, 35, 40),
  disease = c("Hypertension", "Diabetes", "Asthma", "None")
)
```

2. Tidyverse:
```r
library(tibble)
patient_data_tidy <- tibble(
  name = c("John Doe", "Jane Doe", "Mary Johnson", "James Smith"),
  age = c(25, 30, 35, 40),
  disease = c("Hypertension", "Diabetes", "Asthma", "None")
)
```

3. Data.table:
```r
library(data.table)
patient_data_dt <- data.table(
  name = c("John Doe", "Jane Doe", "Mary Johnson", "James Smith"),
  age = c(25, 30, 35, 40),
  disease = c("Hypertension", "Diabetes", "Asthma", "None")
)
```

Notice how the syntax changes slightly between the three ecosystems. Throughout this book, we will be focusing mainly on base R and tidyverse, but it's good to be aware of data.table, especially for large datasets. Practice creating these data frames and examine how they are displayed differently in your R console.