# Getting a Handle on Your Data: The Overview Functions

In the last chapter, we found our intrepid medical fellow using the trial by fire approach to learning R. Let's review her code:

```{r} 
#| output: false
# Subject: Lunch Lecture on TB
# Date: 6/7/2023
# Author: Dr. Wall

# Install the medicaldata package
# install.packages("medicaldata")

# Open the medicaldata toolbox
library(medicaldata)

# View the available datasets
# instructions at https://higgi13425.github.io/medicaldata/
data(package = "medicaldata")

# Print the strep_tb dataset
strep_tb
```

We used several functions:

- `install.packages()` to install the medicaldata package
- `library()` to open the medicaldata package
- `data()` to view the available datasets
- `strep_tb` to print the strep_tb dataset

We accomplished our goal of getting the strep_tb dataset into R, but we did not learn much about the dataset itself. In fact, our method of viewing the data by printing it to the console may add to the intimidation factor of R! 

In this chapter, we will add several practical tools to our arsenal to help us quickly get an overview of our data. 

## Arg! The Data is Too Big!: The head() function

The strep_tb dataset can be printed to the console by running the code. However, the current format of the printed dataset is not very readable. It is hard to distinguish between columns and rows, and too many rows are printed to the console.

Let's use the head() function to print the first 10 rows of the strep_tb dataset to the console.

```{r}
head(strep_tb, n = 5)
```

By default head() will print the first 10 rows of a dataset (head = "header"). We have added an argument to the head() function to print the first 5 rows of the strep_tb dataset (n = 5).

Using the head function when opening new datasets is a good way to get a quick overview of the data. 

## Viewing the data as a spreadsheet: the View() function

Viewing a dataset in the console window has its limitations.Try the following code in your console window:

```r
View(strep_tb)
```

 The View() function allows you to see the strep_tb dataset in a spreadsheet-like format. When executed, this command opens a new tab with a comprehensive table of the data. This tab operates like a browser tab, allowing easy toggling between the console and the data view. To return to your initial code, simply close the tab by clicking on the 'x' in its upper right corner.

::: {.callout-warning}
Commands and variable names in R are case sensitive. View() is not the same as view(). If you type view() instead of View() you will get an error message.
:::

## X-ray vision: the str() function

The strep_tb dataset contains 10 variables. The head() function allows us to see the first 5 rows of the dataset, but it does not tell us anything about the variables in the dataset. The str() function provides a quick overview of the variables in a dataset.

```{r}
str(strep_tb)
```

The str() function provides a summary of the variables in a dataset. The first column of the output lists the variable names. The second column lists the variable types. The third column lists the first few values of each variable. 

## Something useful: the summary() function

Up to this point, we have been getting an overview of the strep_tb dataset. The head() and str() functions are useful for getting a quick overview of a dataset, but they do not provide much information about the data itself. 

Let's add another tool to our data exploration toolbox.The summary() function provides a more detailed overview of the data.

```{r}
summary(strep_tb)
```

## Reviewing the primary source

It can be easy to get caught up in the technical details of data analysis and forget about the data itself. When working with any dataset it is essential to learn about the data from the source.

In this case, the creators of the `medicaldata` package have carefully annotated their datasets to provide a wealth of useful (and interesting!) information. To learn more about the `medicaldata` package, visit the [package website](https://higgi13425.github.io/medicaldata/) or in RStudio package pane, click on the `medicaldata` package to view the help files.

Since the strep_tb dataset is included as a curated dataset, you can access the description of the dataset and the variables by running the following code:

```{r}
?strep_tb
```

Indeed, our medical fellow can not only learn about the dataset, but the authors have also linked the PDF of the original 1948 manuscript in the British Medical Journal.

## Adding notes to your code using comments

Since your R code serves as a kind of living notebook, you can also cut and paste any information from the help files into your code. It might be helpful to add comments in your code to remind yourself the meanings of the variable names and their definitions. 

```{r}

# patient_id
# invented id number for each participant; type: character

# arm
# assigned treatment arm, Streptomycin or Control; type: factor

# dose_strep_g
# grams, dose of Streptomycin: numeric, 0, 1, or 2 grams

# dose_PAS_g
# grams, dose of PAS (Para-Amino-Salicylate): numeric, 5, 10, # or 20 grams. Note that no one in this intial study (study A) # received PAS. This was added for combination therapy in # studies B and C, as reported in 1952.

```

## Bulk commenting: the Comment/Uncomment Lines function

When you have large blocks of text you want to comment, don't worry about adding a # to each line. You can use the menu option `Code > Comment/Uncomment Lines` or the keyboard shortcut `command + shift + c` to comment out multiple lines of code at once.

## Summary of Overview Functions

So far in this chapter, we learned how to use the head(), View(), str(), and summary() functions to explore the strep_tb dataset. These functions are found within the s`base` package of R. This package is automatically loaded when you start R and so immediately available to you.