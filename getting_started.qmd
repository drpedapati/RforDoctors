# Getting Started with R

## Introduction to the data

The `medicaldata` package is a collection of R datasets that are relevant to medical research. It offers a robust collection of medical datasets extracted from a wide range of study designs, including randomized controlled trials, retrospective and prospective cohort studies, and case-control studies. These datasets encompass a diverse array of medical conditions and treatment approaches, providing rich opportunities for learning, exploration, and analysis. One of the datasets, â€˜strep_tb', for example, is drawn from the groundbreaking 1948 trial of Streptomycin treatment for tuberculosis, the first modern randomized, placebo-controlled clinical trial.

The package contains over 19 datasets, covering a wide range of medical topics, including cancer, cardiovascular disease, diabetes, and mental health. The datasets in the medicaldata package are all in a standard format, which makes them easy to use with R.



## Using packages in R

How do we get access to all of these interesting datasets? The beauty of R lies in its simplicity and ease of access to a wealth of data and tools. Unlike traditional methods where you might have to navigate to a website, download files, and manually place them into specific directories, R simplifies this process immensely. One of the big advantages of R is that it provides the capability to access numerous tools and datasets directly from the command line using a single line of code.

## Useful Analogy: Packages are like Toolboxes

Think of R as large workshop with access to a main tool depot. with access to lots of specialized toolkits. In this workshop you are assigned a personal workbench. The toolboxes are designed and put together by different craftsmen, making them unique in the tools they contain. If you've identified a toolbox that you need for a specific project, you first have to bring that toolbox into your workbench. In fact, it would not be unusual to retrieve several toolkits depending on needs of your project.

However, just lugging the toolboxes to your workbench doesn't necessarily mean you can immediately use the tools they contains. If you want access to all your screwdrivers at once, you will need open a specialized screwdriver toolkit. On the otherhand, you might only want a single screwdriver from a special toolkit. this is more than just keeping your workbench tidy, you also don't want to have duplicates of similar tools around which may lead to confusion.

## Unpacking the Analogy
Building on our workshop analogy, think of CRAN as the main tool depot where all officially approved and tested toolboxes are stored. These toolboxes are well-documented, reliable, and updated regularly. So, if you need a tool for a common task, you're likely to find a toolbox containing it in the CRAN depot.

Now, imagine that apart from this main depot, there are also smaller, specialized workshops where innovative craftspeople are continuously designing new and experimental toolboxes. These places are like GitHub and other development repositories. They offer exciting, cutting-edge tools that may not have made their way to the main CRAN depot yet. While the tools from these workshops can be highly useful, they also come with a word of caution as they may not be as thoroughly tested and documented as those in the CRAN depot.

In the context of R, you usually install packages from CRAN, which is like the main depot. But you can also install packages from GitHub and other repositories, if you need to use the latest advancements that have not been released on CRAN yet. 

In both cases, whether you are retrieving a toolbox from the main depot or a smaller workshop, once you've brought it to your workbench (your R environment), the process remains the same - you'd open the toolbox (load the package with `library()`) to access all the tools (functions), or just take out a single tool (`::` operator) as required for your project.

then you might open up the toolbox. Take the two you want and close it.


This is similar to using the `library()` function in R to make the functions of a package available to you.


, much like the specialized functions within R packages.  This is similar to installing a package in R.



Sometimes, you may need a specific tool from a toolbox without requiring the entire set. In such cases, you can reach into the box and pull out the tool you need. This is akin to using the `::` operator in R, which allows you to use a specific function from a package without needing to load the entire package into your workspace. This provides a practical and efficient way to use R, especially when you're dealing with complex projects and numerous packages.
